services:

  cockroach:
    container_name: cockroach
    command:
      - start-single-node
      - --http-addr=:9090
      - --insecure
      - --listen-addr=:26257
      - --store=attrs=ssd,path=/var/lib/cockroach/
    expose:
      - 9090 # Panel
      - 26257 # API
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 5s
      test: curl -f http://cockroach:9090/health
      timeout: 5s
    image: cockroachdb/cockroach:v22.2.5
    labels:
      namespace: cockroach
    ports:
      - '9090:9090'
      - '26257:26257'
    restart: 'no'
    volumes:
      - cockroach:/var/lib/cockroach

  jaeger:
    container_name: jaeger
    environment:
      - LOG_LEVEL=debug
      - COLLECTOR_ZIPKIN_ALLOWED_HEADERS=*
      - COLLECTOR_ZIPKIN_ALLOWED_ORIGINS=*
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    expose:
      - 5775/udp # accept zipkin.thrift over compact thrift protocol (deprecated, used by legacy clients only)
      - 6831/udp # accept jaeger.thrift over compact thrift protocol
      - 6832/udp # accept jaeger.thrift over binary thrift protocol
      - 5778 # serve configs
      - 16686 # serve frontend
      - 14268 # accept jaeger.thrift directly from clients
      - 14269 # admin port: health check at / and metrics at /metrics
      - 14250 # accept model.proto
      - 9411 # Zipkin compatible endpoint (optional)
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 5s
      test: wget --no-verbose --tries=1 --spider http://jaeger:14269
      timeout: 5s
    image: jaegertracing/all-in-one:1.41.0
    labels:
      namespace: jaeger
    ports:
      - '16686:16686'
    restart: 'no'
    volumes:
      - jaeger:/tmp

  migrate:
    container_name: migrate
    depends_on:
      cockroach:
        condition: service_healthy
    entrypoint:
      - '/bin/sh'
      - '-ecx'
      - make migrate-up CI="false" MIGRATE_DSN="cockroachdb://root@cockroach:26257/defaultdb?sslmode=disable" MIGRATE_VER="production"
    image: golang:1.20.2-alpine3.17
    labels:
      namespace: migrate
    restart: 'no'
    volumes:
      - ./Makefile:/go/Makefile:ro
      - ./db/migration:/go/db/migration:ro

  otelcol:
    command:
      - --config=/etc/otelcol/config.yaml
    container_name: otelcol
    expose:
      - 4317
      - 4318
      - 8888
      - 14268
      - 13133
    image: otel/opentelemetry-collector:0.71.0
    labels:
      namespace: otelcol
    ports:
      - '4318:4318'
    restart: 'no'
    volumes:
      - ./docker/otelcol/config.yaml:/etc/otelcol/config.yaml:ro

  # https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html
  pgadmin4:
    container_name: pgadmin4
    depends_on:
      cockroach:
        condition: service_healthy
    env_file: .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_ADDRESS=${PGADMIN_LISTEN_ADDRESS}
      - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT}
    expose:
      - 5050
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 5s
      test: wget --no-verbose --spider --tries=1 http://pgadmin4:5050
      timeout: 5s
    image: dpage/pgadmin4:6.20
    labels:
      namespace: pgadmin4
    ports:
      - '5050:5050'
    restart: 'no'
    volumes:
      - ./docker/pgadmin4/passwords.txt:/pgadmin4/pass:ro
      - ./docker/pgadmin4/servers.json:/pgadmin4/servers.json:ro
      - pgadmin4:/var/lib/pgadmin

  redis:
    container_name: redis
    env_file: .env
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    image: redis:7.0.5
    restart: 'no'
    ports:
      - '6379:6379'
    volumes: 
      - redisdata:/data

  server:
    container_name: server
    depends_on:
      cockroach:
        condition: service_healthy
      # migrate:
      #   condition: service_completed_successfully
      redis:
        condition: service_healthy
    entrypoint: ./build/kucoin
    env_file: .env
    expose:
      - 8080
    image: golang:1.20.2-alpine3.17
    # healthcheck:
    #   interval: 10s
    #   retries: 5
    #   start_period: 5s
    #   test: wget --no-verbose --tries=1 --spider http://server:8080/healthz
    #   timeout: 5s
    # image: golang:1.20.2-alpine3.17
    labels:
      namespace: server
    ports:
      - '8080:8080'
    restart: 'no'
    volumes:
      - ./:/workspace
    working_dir: /workspace

  swagger-filebuilder:
    container_name: swagger-filebuilder
    image: quay.io/goswagger/swagger:v0.29.0
    labels:
      namespace: swagger-filebuilder
    restart: 'no'
    volumes:
      - ./:/workspace
    working_dir: /workspace

  swagger-ui:
    container_name: swagger-ui
    # depends_on:
    #   server:
    #     condition: service_healthy
    expose:
      - 7077
    environment:
      # - API_KEY=**None**
      # - BASE_URL=""
      - PORT=7077
      # - SWAGGER_JSON=openapiv2/apidocs.swagger.json
      # - SWAGGER_JSON_URL=http://localhost:7070/openapiv2/apidocs.swagger.json
      # https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md
      # - URLS: [{ url: "http://localhost:7070/openapiv2/apidocs.swagger.json", name: "apidocs" }]
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 5s
      test: wget --no-verbose --spider --tries=1 http://swagger-ui:7077
      timeout: 5s
    image: swaggerapi/swagger-ui:v4.15.5
    labels:
      namespace: swagger-ui
    ports:
      - '7077:7077'
    restart: 'no'

volumes:
  server:
  cockroach:
  jaeger:
  pgadmin4:
  redisdata:
